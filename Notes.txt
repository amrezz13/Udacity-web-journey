1- JS
  	 A-  Variables:
         Const:
            The keyword const is a little misleading.
            It does not define a constant value. It defines a constant reference to a value.
            Because of this you can NOT:
            Reassign a constant value			
            Reassign a constant array
            Reassign a constant object
            But you CAN:
            Change a constant array
            Change a constant object 
            The const keyword was introduced in ES6 (2015).
            Variables defined with const cannot be Redeclared.
            Variables defined with const cannot be Reassigned.
            Variables defined with const have Block Scope.



	B- Objects:
			best obect example var myObj = { 
		  								color: "orange",
		  								shape: "sphere",
		  								type: "food",
		  								eat: function() { return "yummy" } //eat is method can be called as myObj.eat()
										};
			other example for objects var savingsAccount = {
										balance: 1000,
										interestRatePercent: 1,
										deposit: function addMoney(amount) {
											if (amount > 0) {
												savingsAccount.balance += amount;
											}
										},
										withdraw: function removeMoney(amount) {
											var verifyBalance = savingsAccount.balance - amount;
											if (amount > 0 && verifyBalance >= 0) {
												savingsAccount.balance -= amount;
											}
										},

										printAccountSummary: function(){
											return "Welcome!\nYour balance is currently $1000 and your interest rate is 1%."
										}
									};
									// end of object
									//what to print in Console will be the message
									console.log(savingsAccount.printAccountSummary());

		***For accessing properties, you can use either of ["bracket notation"] or .dotNotation.
		For accessing methods, you can use only .dotNotation. Do not forget to use a pair of ( ) and passing the argument along with the method name e.g. objectName.methodName(argument); while calling.

Hoisting: 
Hoisting is a result of how JavaScript is interpreted by your browser.
 Essentially, before any JavaScript code is executed, all variables declared with var are "hoisted", which means they're raised to the top of the function scope.
Variables declared with let and const eliminate this specific issue of hoisting because they’re scoped to the block, not to the function.
 Previously, when you used var, variables were either scoped globally or locally to an entire function scope.


Don't use Var use let and const .

Template literals are essentially string literals that include embedded expressions.

Denoted with backticks (` `) instead of single quotes ( '' ) or double quotes ( "" ), template literals can contain placeholders which are represented using ${expression}.
let message = `${student.name} please see ${teacher.name} in ${teacher.room} to pick up your report card.`;

 This makes it much easier to build strings.


 Another use case for the rest parameter is when you’re working with variadic functions. Variadic functions are functions that take an indefinite number of arguments.

innerHTML also outerHTML both return objects but inner return content of the html element while outer retun html element 

accessing exam[Object.keys(exam)[7]]; 